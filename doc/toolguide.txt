





           Protocol CASE Tools - A guide for users.
                    (c) John Howie, 1993.























































                            July 17, 2024





                                - 2 -


  _1.  _I_n_t_r_o_d_u_c_t_i_o_n

  The case tools described in this guide are the  state  pre-processor
  (spp), the state animator (san), and the state validator (schk). The
  use of each tool is described in detail later.

  Each tool has one thing in common, an input file. The format of this
  input  file  is  identical  for  all  three  tools and its syntax is
  described later.

  The uses and applications to which the tools may be applied is  out-
  with  the scope of this document. The first tool, the pre-processor,
  was designed originally to aid implementors of OSI protocols working
  from  the  ISO  and CCITT standards. The animator and validator came
  later but are useful in checking for errors  in  the  standards  and
  input files derived from them. All three tools have been used to aid
  implementors of proprietary protocols and in teaching the principles
  of protocol design.

  _2.  _T_h_e _I_n_p_u_t _F_i_l_e

  The input file is a text file that is used to describe the operation
  of  a  protocol. The protocol is modelled as a Finite State Machine.
  The protocol may be in one of a number of pre-determined  states.  A
  change  to  a new state is made in response to an incoming event. In
  addition a protocol may perform actions or send outgoing events. The
  actions to perform, events to send, and changes of state may be pro-
  cessed conditionally depending  on  the  outcome  of  evaluating  an
  expression made up of predicates.

  The format of the input file is similar to that used  in  the  CCITT
  OSI  protocol  standards  and  a  simple  syntax is used to describe
  events, states, actions, predicates and state  change  tables  which
  describe protocol operation.

  All three tools check the input data for errors.  Errors  can  arise
  due to missing or duplicated data, incorrect syntax and missing key-
  words. Whenever an error is encountered the line number of the error
  in the input file is reported with a message describing the error.

  The following information is defined in the input file:

          Event Categories (as part of Event definitions)
          Events
          States
          Predicates
          Actions
          State Change Tables (including Table Notes)


  Each is discussed in detail.






                            July 17, 2024





                                - 3 -


  _2._1.  _E_v_e_n_t _C_a_t_e_g_o_r_i_e_s

  Each event must belong to a category. It  may  be  that  all  events
  belong  to one category or that one category holds some events while
  another category has  others.  An  event  can  belong  to  only  one
  category.  A  category  is  often  used to describe the source of an
  event, eg. all events relating to timers may belong  to  a  category
  called Time_Events.

  Event categories are determined  whilst  processing  event  declara-
  tions.  Unlike previous versions of the State Pre-Processor there is
  no need, or facility, to define categories explicitly before use  in
  event declarations.

  _2._2.  _D_e_f_i_n_i_n_g _E_v_e_n_t_s

  Events are defined by declaring the name of the event, the  category
  it  belongs  to  and  a description of the event. The description is
  optional and may be omitted. If it is included it must  be  enclosed
  in  double  quotes  ("),  or be escaped by using the ANSI 'C' or C++
  comment delimiters, /* ... */ or //.

  Events need not be declared all at the same time.  If  an  event  is
  declared twice the pre-processor will display a warning message. The
  actual entry in the input file could be  different,  ie.  the  event
  could have a different category or event description than the previ-
  ous declaration, but the pre-processor will not check past the event
  name  if  it  has been declared previously. It is wise, therefor, to
  check all warnings about duplicate events.

  The syntax for defining events is:

  define events
  begin
          event_name      category_name   "event description here"
          event_name      category_name   "event description here"
          event_name      category_name   "event description here"
          .
          .
          .
          event_name      category_name   "event description here"
  end

  _2._3.  _D_e_f_i_n_i_n_g _S_t_a_t_e_s

  The input file requires that all the states that the  automaton  can
  be  in be defined before use in a state change table. The reason for
  this is to add to the amount of error checking that can be done.  By
  checking  the states used in the state change table against the list
  defined earlier the programmer can be more confident about the  out-
  put  files.  It  would be easy, say, for a typing error in the state
  change table to cause a new state to be created. The ISO  and  CCITT
  documents  used  when  developing  the  state  pre-processor defined
  states before the state change table.



                            July 17, 2024





                                - 4 -


  Another benefit of defining the states before the state change table
  is that the states can have explanatory text and doing this once per
  state is more desirable than somehow declaring the text  every  time
  the state is encountered in the state change table.

  The pre-processor will check that a state has  not  been  previously
  declared  in  the input file. If it has a warning message is printed
  along with some other information.  If  a  duplicate  is  found  any
  explanatory text given is ignored.

  As with events, the description field is optional but, if  included,
  must be between double quotes (") or be represented as a comment.

  The syntax for declaring states is:

  define states
  begin
          state_name      "explanatory text"
          state_name      "explanatory text"
          state_name      "explanatory text"
          .
          .
          .
          state_name      "explanatory text"
  end


  _2._4.  _D_e_f_i_n_i_n_g _P_r_e_d_i_c_a_t_e_s

  The definition of a predicate is unlike that  of  event  categories,
  events  or states. The reason is that a predicate is a function that
  will either return TRUE or FALSE depending on  whether  or  not  the
  predicate  is  true.  The state change table can have a predicate or
  combination of predicates followed by an action list that is  to  be
  executed if the predicate list is logically TRUE.

  The fact that a predicate is a function whose return value is to  be
  used  is  a  problem as the name of the function to be executed when
  the predicate is encountered is not defined anywhere.

  The state pre-processor will prototype  a  predicate  function  and,
  unless  otherwise  directed,  create an empty function to handle the
  predicate evaluation. The function name used is the predicate  name.
  Predicate names must start with an upper or lower case P followed by
  a numeric identifier.  The pre-processor is case sensitive  so,  for
  example, P15 is not the same predicate as p15.

  Like event categories, events and states  before,  duplicate  predi-
  cates  are  ignored. Again, if a duplicate is found, the rest of the
  information provided with the predicate name is  not  checked.  This
  means  that  all warning messages should be investigated. Predicates
  need not be declared together. Also, the sames rules for explanatory
  text exist for predicates.




                            July 17, 2024





                                - 5 -


  The predicates are defined in the following manner:

  define predicates
  begin
          predicate_name  "explanatory text"
          predicate_name  "explanatory text"
          predicate_name  "explanatory text"
          .
          .
          .
          predicate_name  "explanatory text"
  end


  _2._5.  _D_e_f_i_n_i_n_g _A_c_t_i_o_n_s

  Actions, like predicates, have functions  to  be  called  associated
  with  them.   When an action is encountered in an action list in the
  state change table the name of the action is replaced with a call to
  the  corresponding  function in the 'C' source output file. The pre-
  processor will prototype and create an empty function whose name  is
  based  on the action identifier. The action identifier consists of a
  numeric identifier between square brackets, eg.  [05].

  Like all the others before, duplicate actions are  ignored.  When  a
  duplicate  action is encountered the pre-processor doesn't check any
  other information provided.

  The syntax for declaring actions is:

  define actions
  begin
          action_name     "explanatory text"
          action_name     "explanatory text"
          action_name     "explanatory text"
          .
          .
          .
          action_name     "explanatory text"
  end


  _2._6.  _S_t_a_t_e _C_h_a_n_g_e _T_a_b_l_e_s (_i_n_c_l_u_d_i_n_g _T_a_b_l_e _N_o_t_e_s)

  State change tables are used to describe operation  of  a  protocol.
  One  table  may  be  used to describe the operation of a protocol or
  several tables may be used, one for each stage  of  protocol  opera-
  tion,  eg.  one for connection establishment, one for data transfer,
  and one for connection release.

  Like the tables presented in the standards the state  change  tables
  in  the  input file are made up of state-event combinations. At each
  combination expressions, consisting of predicates, may  be  used  to
  control  which,  if any, actions, state changes, and outgoing events



                            July 17, 2024





                                - 6 -


  are to be performed.

  Each table uses a state variable, which must be defined  before  the
  table.  There may be one state variable for each table or tables may
  share a state variable.  The state variable is  set  to  an  initial
  state,  ie. the state the system will be in before any events occur.
  The syntax for defining the state variable and  it's  initial  state
  is:

  define statevarname variablename initialstate some_predefined_state


  If a protocol has defined end-states these may be declared with  the
  state  variable  name and initial state. The declaration must follow
  the initial state declaration. The syntax is:

          endstate[s] end_state [end_state] [end_state] [...]


  If the initial or end states have not been defined  before  use  and
  error message will be printed.

  Table notes and the state/event/action combination  are  represented
  in  a  slightly  different manner to the event, action, etc. defini-
  tions. Both are described within a table. The keyword  _t_a_b_l_e  signi-
  fies  the  start  of  the  table. A table must have a name. Like the
  defines before, the keyword _b_e_g_i_n marks  the  beginning  proper.  It
  must follow the table declaration.

  Once in the table notes  and  states  can  be  declared.  Notes  are
  declared  using the keyword _n_o_t_e_s.  Notes have the format note iden-
  tifier, a number between circular brackets, eg.  (24),  followed  by
  note text. The notes are terminated by the keyword _s_t_a_t_e, which sig-
  nifies the beginning of a state declaration or by the  keyword  _e_n_d.
  If a note name is a duplicate of a previous note name a warning mes-
  sage is printed and the rest of the note declaration, ie.  the  note
  text,  is ignored.  The keyword _e_n_d also terminates the table. It is
  important to remember that notes are table specific and if more than
  one  table  is  declared  and the notes are used in the second table
  they will have to be declared in the second table.

  Like notes, states are declared using the _s_t_a_t_e keyword.  This  key-
  word is followed by a state name. If the state name was not declared
  earlier in a 'define states' an error message  is  printed.  If  the
  state name is a duplicate, ie. a 'state statename' is the same as an
  earlier one in the same table, the state and all it's related events
  are  ignored. All warnings of this nature should be investigated. If
  the state name has been declared previously but not used already  in
  the  current  table the parser will look at the following lines. The
  lines will be read and considered to be part of  the  current  state
  description  until the keyword _s_t_a_t_e or _n_o_t_e_s or _e_n_d is encountered.
  Each of the following lines relates to a particular event  that  can
  occur  when  the  system  is in the current state. The format of the
  event lines are



                            July 17, 2024





                                - 7 -


          event event_name        actions
          event event_name        predicates : actions
          event event_name        predicates : actions; predicates: actions; ...


  The actions are made up of actions, events, table notes, or a combi-
  nation  of these. Predicates can be combined with the logical opera-
  tors _a_n_d, _o_r, and _n_o_t.  Instead of words the following  symbols  can
  be used.

          and     &
          or      |
          not     ^


  It is important that the predicates and actions following  an  event
  are  syntactically  correct.  If  they  are not then the parser will
  print error messages and no output files will be created. The format
  of a each combination will be described in turn.

  Predicates followed by actions take the following form:

          predicate_list : action_list


  The colon (:) and semi-colon (;) must be  present,  separated  by  a
  space and in the correct place. The predicate list can, as mentioned
  earlier, use logical operators to combine predicates.  Brackets  can
  also be used to group predicates and logical operators together, eg.

          ( P0 and P2 ) or not P1 : action_list


  Brackets can be nested. Another predicate list may follow the  semi-
  colon.  In this case the parser will understand this to mean that if
  the first set of predicates equals a logical FALSE, the  second  set
  is  to be tested.  In other words an if...then...elif...then... con-
  truct is created.

  The action list is made up of notes, events,  states,  and  actions.
  Each  must be separated by a space. A note will become a comment, an
  event - a function call, an action - a function call, and a state  -
  reassign the state variable to the value of the given state.

  If an event is declared more than once for a given  state  an  error
  message will be displayed for each declaration other than the first.
  The associated action list is not processed but each error should be
  checked.  If  a state is declared more than once in a table an error
  message will also be displayed and it, and all its events, will  not
  be processed either.

  For an example of what the state table declaration  can  look  like,
  read the example input file for the Transport Layer.




                            July 17, 2024





                                - 8 -


  _3.  _T_h_e _S_t_a_t_e _P_r_e-_P_r_o_c_e_s_s_o_r

  _3._1.  _O_v_e_r_v_i_e_w

  The state pre-processor is a code generator. It takes an input  file
  and  produce  two output files. It will only do so if the input file
  is parsed without any fatal  errors.  Files  will  be  created  even
  though  an  input  file  contains warnings or errors. If warnings or
  errors are generated they should be investigated.

  _3._2.  _T_h_e _O_u_t_p_u_t _F_i_l_e_s

  As stated above, the state pre-processor  will  produce  two  output
  files from an input file. The first file is a header file. This con-
  tains definitions of categories, events, and states. Each is given a
  unique number such that, eg., no two events can have the same number
  but an event  and  a  state  could.  In  addition  to  defining  the
  categories, events and states, the functions associated with each of
  the predicates and actions are prototyped. It is up to the  program-
  mer to decide whether or not the values given to the definitions are
  changed or not and whether or not to add  more  information  to  the
  header file.

  The 'C' source file is both syntactically and  semantically  correct
  and  can be run through a 'C' compiler as is. The programmer should,
  however, modify the source code. If the state pre-processor was  run
  with  no  special  options a set of empty functions will be created.
  There is one function for each predicate  and  action.  Their  names
  correspond  to predicates and actions defined in the input file. The
  programmer should fill out the functions to check the required  con-
  ditions  and  to  perform the necessary actions. Two other functions
  are created. The first, called badstate (), is called whenever a bad
  state  is  entered into in the state switch mechanism. The second is
  called badevent (). It is called whenever an event  is  not  catered
  for  in a state. The programmer should also code these two functions
  to do whatever error recovery is required. The only other  functions
  found  in  the  source  code  file  are  those relating to the table
  declarations in the input file, one per  table.  The  functions  are
  given  the  name  as  supplied  by the programmer in the input file.
  These  functions  may  need  alteration  to  suit  particular   cir-
  cumstances, eg. where a table note says that something is to be done
  but no actions or events are present to do it.

  One other function that needs coding is not  created  by  the  state
  pre-processor.   It  is  called  eventout () and is passed the event
  that is to be sent out.

  _3._3.  _U_s_i_n_g _T_h_e _S_t_a_t_e _P_r_e-_P_r_o_c_e_s_s_o_r

  The state pre-processor will take command line arguments  that  will
  influence that way that it operates. In the simplest form of invoca-
  tion the state pre-processor will take an input file and produce two
  files called states_out.c and states_out.h, eg.




                            July 17, 2024





                                - 9 -


          % ls
          stateinfile
          % spp stateinfile
          .
          .
          .
          % ls
          stateinfile     states_out.c    states_out.h
          %


  The command line options are:

  -c   Check only, do not produce any output files.

  -f   No functions, don't create empty functions.  This  allows  pro-
       grammers  to  change  just the state switch tables. Remember to
       keep a copy of the old ones.

  -o   Use the following filename as a basis for the output files, eg.
       '-o tl' will produce the output file tl.c and tl.h

  -v   Display verbose information about what the  program  is  doing,
       really  only  useful when debugging the pre-processor or trying
       to find really tricky errors.

  If you are unsure what input file was used to create an output  file
  and  on  what  date,  the first few lines of both the 'C' source and
  header files contain this information.




























                            July 17, 2024





                                - 10 -


  _4.  _T_h_e _S_t_a_t_e _A_n_i_m_a_t_o_r

  _4._1.  _O_v_e_r_v_i_e_w

  The state animator is a tool that can be used by the  programmer  to
  check  the description of operation of a finite state machine before
  implementing it by hand or through use of a tool such as  the  state
  pre-processor.  By allowing the programmer to check a description of
  operation for errors or  inconsistences  before  implementation  the
  number of errors introduced at the design stage should be minimised.

  The state animator takes a file with the same format  as  the  state
  pre-processor  (and  described  above)  and, if it contains no fatal
  errors, allows the user to animate it.

  _4._2.  _U_s_i_n_g _T_h_e _S_t_a_t_e _A_n_i_m_a_t_o_r

  The state animator may be used to test the description of  operation
  of  a finite state machine by simulating incoming events and setting
  predicate values.  The animator will respond by  displaying  details
  of  the  change of state (if any) in response to incoming events and
  predicate values (where appropriate).

  The animator will accept a number of commands at the  (san)  prompt.
  These  are  event,  list, quit, set, show, state, source, and table.
  Each will be discussed in turn.

  The animator takes, as an argument, the name of  an  input  file  to
  animate.  Other command line options include:

  -o   This option, which is not supported on all  systems,  instructs
       the  debugger  to make a copy of all screen output and keyboard
       or file input and send it to the file named after the switch.

  -v   This option turns on debugging in the parser.  It  generates  a
       lot  of  information  that, in most cases, is not needed. It is
       useful in checking syntax errors in input files.

  _4._2._1.  _e_v_e_n_t - _S_i_m_u_l_a_t_e _I_n_c_o_m_i_n_g _E_v_e_n_t_s

       The syntax of this command is:

          (san) event eventname


  where eventname is a valid  event  for  the  current  state  in  the
  current  table.  If the event specified does not exist then an error
  message is printed. Specifying an event that is defined in the input
  file  will  cause  the  animator  to enter the current table for the
  current state and incoming event combination. The result of this  is
  displayed.

  This result may include details of any expressions  being  evaluated
  and  the  simulation  of sending outgoing events, performing actions



                            July 17, 2024





                                - 11 -


  and changing state.

  If the state is changed the new state is checked. If it  is  not  in
  the  table  an  error  message  is  displayed and the state will not
  change. If the state changed to is an end state a  message  to  this
  effect will be printed.

  _4._2._2.  _l_i_s_t - _L_i_s_t _T_a_b_l_e_s, _S_t_a_t_e_s _O_r _E_v_e_n_t_s

  The list command will take, as it's argument, one of tables,  states
  or events. Listing tables will cause a list of the tables defined in
  the input file to be displayed. A '>' will be displayed next to  the
  current table.

  Listing states will cause a  list  of  the  states  defined  in  the
  current  table to be displayed. Against the current state a '>' will
  be displayed.

  Listing events will cause a list of the valid events for the current
  state to be displayed on the screen.

  Using the list command, the programmer  can  see  what  options  are
  available  for  switching  between tables, states within tables, and
  selecting events for the current state and table.

  _4._2._3.  _q_u_i_t - _L_e_a_v_e _T_h_e _A_n_i_m_a_t_o_r _G_r_a_c_e_f_u_l_l_y

  This command will close any open files and leave the program  grace-
  fully. It should be used in preference to a CTRL-C or CTRL-D.

  _4._2._4.  _s_e_t - _S_e_t _A _P_r_e_d_i_c_a_t_e _T_o _A _V_a_l_u_e

  Predicates may be either true or false. They are used when  evaluat-
  ing expressions that affect the state change mechanism. The set com-
  mand takes two arguments. The first is the name of the predicate  to
  change, or all, and the second is the value. The value may be one of
  true, TRUE, false, or FALSE.

  _4._2._5.  _s_h_o_w - _S_h_o_w _A _P_r_e_d_i_c_a_t_e _O_r _A_l_l _P_r_e_d_i_c_a_t_e _V_a_l_u_e_s

  This command takes one argument, the name of the predicate to  show.
  If  the name is _a_l_l then all predicate values will be shown. This is
  useful for attempting to predict the operation of the  state  change
  mechanism where predicates are involved.

  _4._2._6.  _s_t_a_t_e - _G_e_t _T_h_e _C_u_r_r_e_n_t _S_t_a_t_e _O_r _C_h_a_n_g_e _T_o _A _S_t_a_t_e  _U_n_c_o_n_d_i_-
  _t_i_o_n_a_l_l_y

  This command, without any arguments, will display the  name  of  the
  current  state  for the current table. By specifying a current state
  name for the current table, the animator will unconditionally change
  to  the  named  state,  to  which  the  next  incoming event will be
  applied.




                            July 17, 2024





                                - 12 -


  _4._2._7.  _s_o_u_r_c_e - _R_e_a_d _s_a_n _C_o_m_m_a_n_d_s _F_r_o_m _A _F_i_l_e

  If a series of commands normally typed at the (san) prompt are  used
  frequently,  it  may be worthwhile typing them into a text file, one
  to a line. The commands in this text file may then  be  executed  by
  using  the  source command. The only argument to this command is the
  name of the file to read commands from.

  Once the end of file has been reached the user is prompted for  more
  commands in the usual manner, ie. at the (san) prompt.

  _4._2._8.  _t_a_b_l_e - _G_e_t _T_h_e _N_a_m_e _O_f _T_h_e _C_u_r_r_e_n_t _T_a_b_l_e _O_r _C_h_a_n_g_e _T_a_b_l_e

  This command, without any arguments, displays the name of the  table
  to  which  the  current  state and an incoming event are applied. By
  supplying an argument, which is a valid  table  name,  the  animator
  will use the named table in all future operations.

  When changing table, the state of the previous table is stored. This
  allows the user to switch between two tables, such as a client table
  and a server table, without losing state in either table.  Currently
  predicates  are  global  and  if  set  by the user in one table, the
  change will be seen in another. This may change in the future.

  The author is of the opinion that if multiple tables  are  used  and
  contained  in  an input file then each table should relate to a par-
  ticular aspect of protocol operation, eg. connection  establishment,
  data  transfer,  and  connection release. The use of two tables, one
  for each end of a communication path, eg.   Client  and  Server,  is
  frowned  upon  and  problems  may  be  encountered (such as with the
  predicates).


























                            July 17, 2024





                                - 13 -


  _5.  _T_h_e _S_t_a_t_e _V_a_l_i_d_a_t_o_r

  _5._1.  _O_v_e_r_v_i_e_w

  Both the pre-processor and  animator  parse  an  input  file  before
  proceeding  to  either  generate code or animate a description. Both
  will report warnings, errors or fatal errors. These may be caused by
  either  syntax errors or missing and bad declarations. An input file
  may be parsed without any of these occurring but  it  may  still  be
  incorrect.  A  file  may  be syntactically correct but the semantics
  could be wrong. Most semantic errors occur in tables and include the
  introduction  of  non-determinism  or  the use of mutually exclusive
  predicates in an expression. The validator attempts to point  out  a
  variety of problems, if encountered, in a description.

  _5._2.  _U_s_i_n_g _T_h_e _V_a_l_i_d_a_t_o_r

  The validator, like the pre-processor and animator, is invoked  with
  the  name  of  the  description file as an argument. There are other
  command line options. These are:

  -i   Ignore errors in the input file. By default the validator  will
       abort  with a message telling users to correct all errors in an
       input file before attempting to run the validator. The  valida-
       tor will work with a file containing warnings.

  -o   Use of this option is not supported (yet) on  all  systems.  It
       should be followed by the name of an output file into which all
       problems found should be reported.

  -v   This switches on the verbose mode of the parser  and  can  gen-
       erate pages of debugging information. In most cases this option
       can be ignored.

  _5._3.  _C_o_n_d_i_t_i_o_n_s _C_h_e_c_k_e_d _F_o_r _B_y _T_h_e _A_n_i_m_a_t_o_r

  The animator checks input files for several  conditions,  or  rather
  violations  of  conditions.  The  first  is the use of predicates in
  expressions. The first condition checked is  that  expressions  can,
  theoretically,  evaluate true. If, for example, the predicate p1 was
  used in the following expression, that expression would never evalu-
  ate true:

          p1 and (not p1)

  When such an expression is encountered, an message is  displayed  on
  the screen.

  The next condition checked is that all expressions used at a  state-
  event  combination may evaluate true and be processed. An expression
  might evaluate true but never be processed due to an earlier expres-
  sion,  using  a  subset  of  the predicates in the later expression,
  evaluates true. The following is an example:




                            July 17, 2024





                                - 14 -


          state STATE1
                  event EVENT1    p8 : ... ;
                                  p6 & p7 : ... ;
                                  (p6 & p7) | p8 : ...

  In the above example the first two  expressions  can  evaluate  true
  independantly  of the other and will be processed. The third expres-
  sion, however, can evaluate true but  will  never  be  processed  as
  either the first or second expression will evaluate true and be pro-
  cessed first. This type of error, one that can be the cause of  non-
  determinism, will be reported.  Note that both the first two expres-
  sions can evaluate true at the same time but this is allowed and  is
  not considered to be a cause of non-determinism.

  The validator, on checking an expression and  finding  that  it  can
  evaluate  true,  goes  on  to  check the associated action list. The
  parser will have ensured that all outgoing events, actions and state
  changes  have  been  declared. The only possible problem is that the
  state change may be to a state that is not in the current table.  If
  there  is a change of state to a state that isn't found in the table
  an error message will be printed.

  The final two checks made on tables are that all states in  a  table
  are  reachable  from  the  initial  state  and  that  end states, if
  defined, can be reached from every other state. Where there are more
  than  one  end  state  only  one end state needs to be reachable. If
  either a table state can't be reached from the initial state  or  an
  end state can't be reached an error message will be printed.





























                            July 17, 2024


